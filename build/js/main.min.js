(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _default = f => {
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', f);
  } else {
    f();
  }
};

exports.default = _default;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ = _interopRequireDefault(require("./tasks/1"));

var _2 = _interopRequireDefault(require("./tasks/2"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = () => {
  (0, _.default)();
  (0, _2.default)();
};

exports.default = _default;

},{"./tasks/1":3,"./tasks/2":4}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _documentReady = _interopRequireDefault(require("../../../helpers/documentReady"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Description:
// 1.Написать функцию, которая вычисляет факториал заданного числа.
const factorialCalc = num => num <= 1 ? 1 : num * factorialCalc(num - 1);

const taskRun = () => {
  const taskElement = document.querySelector('.task-1');
  if (taskElement === null) return;
  const textboxElement = taskElement.querySelector('.task-1__textbox');
  const btnElement = taskElement.querySelector('.task-1__btn');
  const resultElement = taskElement.querySelector('.task-1__result');
  btnElement.addEventListener('click', () => {
    resultElement.value = factorialCalc(Number.parseInt(textboxElement.value, 10));
  }); // TEST:

  btnElement.click();
};

var _default = () => (0, _documentReady.default)(taskRun);

exports.default = _default;

},{"../../../helpers/documentReady":1}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _documentReady = _interopRequireDefault(require("../../../helpers/documentReady"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Description:
// 2.Написать функцию, которая выводит все числа из заданного пользователем диапазона
//   в прямом порядке. И еще одну функцию – для вывода в обратном порядке.
const taskRun = () => {
  const form = document.querySelector('.task-2');
  if (form === null) return;
  const rangeMin = form.querySelector('.task-2__range-min');
  const labelMin = form.querySelector('.task-2__label-min');
  const rangeMax = form.querySelector('.task-2__range-max');
  const labelMax = form.querySelector('.task-2__label-max');
  const result = form.querySelector('.task-2__result');

  const rangeNumbers = (a, b, acc = []) => {
    if (a === b) {
      acc.push(b);
      return acc;
    }

    acc.push(a);
    return rangeNumbers(a + 1, b, acc);
  };

  const ascHandler = () => rangeNumbers(+rangeMin.value, +rangeMax.value);

  const descHandler = () => ascHandler().reverse();

  new Map([['min', {
    range: rangeMin,
    label: labelMin
  }], ['max', {
    range: rangeMax,
    label: labelMax
  }]]).forEach((v, k, m) => {
    m.get(k).label.textContent = m.get(k).range.value;
    v.range.addEventListener('input', e => {
      m.get(k).label.textContent = e.target.value;

      if (k === 'max') {
        m.get('min').range.max = e.target.value;
        m.get('min').label.textContent = m.get('min').range.value;
      }
    });
  });
  new Map([['asc', {
    btn: form.querySelector('.task-2__btn-asc'),
    handler: () => {
      result.textContent = ascHandler().toString();
    }
  }], ['dest', {
    btn: form.querySelector('.task-2__btn-desc'),
    handler: () => {
      result.textContent = descHandler().toString();
    }
  }]]).forEach(v => {
    v.btn.addEventListener('click', v.handler);
  });
};

var _default = () => (0, _documentReady.default)(taskRun);
/*
// 3.Написать функцию, которая выводит переданное ей число задом наперед.
//   Например: число 1234 вывести как 4321.

//

// 4.Написать функцию, которая считает сумму цифр числа.
//   Например: число 1357, сумма 1 + 3 + 5 + 7 = 16.

//

// 5.Написать функцию, которая принимает число и выводит соответствующее количество
//   вложенных пар круглых скобок. Например: число 4 – (((()))).
*/


exports.default = _default;

},{"../../../helpers/documentReady":1}],5:[function(require,module,exports){
"use strict";

var _documentReady = _interopRequireDefault(require("./helpers/documentReady"));

var _index = _interopRequireDefault(require("./hw/7/index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const init = {
  hw7: _index.default
};
(0, _documentReady.default)(() => {
  document.querySelector('.menu__list').querySelectorAll('.menu__link').forEach(a => {
    if (window.location.href === a.href) {
      a.classList.add('menu__link--active');

      if (a.href.includes('hw')) {
        init[a.href.substring(a.href.lastIndexOf('/') + 1).replace('.html', '')]();
      }
    }
  });
});

},{"./helpers/documentReady":1,"./hw/7/index":2}]},{},[5])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
