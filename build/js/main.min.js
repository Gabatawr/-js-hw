(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _default = f => {
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', f);
  } else {
    f();
  }
};

exports.default = _default;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ = _interopRequireDefault(require("./tasks/1"));

var _2 = _interopRequireDefault(require("./tasks/2"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = () => {
  (0, _.default)();
  (0, _2.default)();
};

exports.default = _default;

},{"./tasks/1":3,"./tasks/2":4}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _documentReady = _interopRequireDefault(require("../../../helpers/documentReady"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Description:
// 1.Написать функцию, которая вычисляет факториал заданного числа.
const factorialCalc = num => num <= 1 ? 1 : num * factorialCalc(num - 1);

const taskRun = () => {
  const taskElement = document.querySelector('.task-1');
  if (taskElement === null) return;
  const textboxElement = taskElement.querySelector('.task-1__textbox');
  const btnElement = taskElement.querySelector('.task-1__btn');
  const resultElement = taskElement.querySelector('.task-1__result');
  btnElement.addEventListener('click', () => {
    resultElement.value = factorialCalc(Number.parseInt(textboxElement.value, 10));
  }); // TEST:

  btnElement.click();
};

var _default = () => (0, _documentReady.default)(taskRun);

exports.default = _default;

},{"../../../helpers/documentReady":1}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _documentReady = _interopRequireDefault(require("../../../helpers/documentReady"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Description:
// 2.Написать функцию, которая выводит все числа из заданного пользователем диапазона
//   в прямом порядке. И еще одну функцию – для вывода в обратном порядке.
const taskRun = () => {
  const task = document.querySelector('.task-2');
  if (task === null) return;
  const rangeMin = task.querySelector('.task-2__range-min');
  const labelMin = task.querySelector('.task-2__label-min');
  const rangeMax = task.querySelector('.task-2__range-max');
  const labelMax = task.querySelector('.task-2__label-max');
  const result = task.querySelector('.task-2__result');

  const rangeNumbers = (a, b, acc = []) => {
    if (a === b) {
      acc.push(b);
      return acc;
    }

    acc.push(a);
    return rangeNumbers(a + 1, b, acc);
  };

  const ascHandler = () => rangeNumbers(+rangeMin.value, +rangeMax.value);

  const descHandler = () => ascHandler().reverse();

  new Map([['min', {
    range: rangeMin,
    label: labelMin
  }], ['max', {
    range: rangeMax,
    label: labelMax
  }]]).forEach((v, k, m) => {
    m.get(k).label.textContent = m.get(k).range.value;
    v.range.addEventListener('input', e => {
      m.get(k).label.textContent = e.target.value;

      if (k === 'max') {
        m.get('min').range.max = e.target.value;
        m.get('min').label.textContent = m.get('min').range.value;
      }
    });
  });
  new Map([['asc', {
    btn: task.querySelector('.task-2__btn-asc'),

    handler() {
      result.textContent = ascHandler();
    }

  }], ['dest', {
    btn: task.querySelector('.task-2__btn-desc'),

    handler() {
      result.textContent = descHandler();
    }

  }]]).forEach(v => v.btn.addEventListener('click', v.handler));
};

var _default = () => (0, _documentReady.default)(taskRun);
/*
// 3.Написать функцию, которая выводит переданное ей число задом наперед.
//   Например: число 1234 вывести как 4321.

//

// 4.Написать функцию, которая считает сумму цифр числа.
//   Например: число 1357, сумма 1 + 3 + 5 + 7 = 16.

//

// 5.Написать функцию, которая принимает число и выводит соответствующее количество
//   вложенных пар круглых скобок. Например: число 4 – (((()))).
*/


exports.default = _default;

},{"../../../helpers/documentReady":1}],5:[function(require,module,exports){
"use strict";

var _documentReady = _interopRequireDefault(require("./helpers/documentReady"));

var _index = _interopRequireDefault(require("./hw/7/index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const init = {
  hw7: _index.default
};
(0, _documentReady.default)(() => {
  document.querySelector('.menu__list').querySelectorAll('.menu__link').forEach(a => {
    if (window.location.href === a.href) {
      a.classList.add('menu__link--active');

      if (a.href.includes('hw')) {
        init[a.href.substring(a.href.lastIndexOf('/') + 1).replace('.html', '')]();
      }
    }
  });
});

},{"./helpers/documentReady":1,"./hw/7/index":2}]},{},[5])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvaGVscGVycy9kb2N1bWVudFJlYWR5LmpzIiwic3JjL2pzL2h3LzcvaW5kZXguanMiLCJzcmMvanMvaHcvNy90YXNrcy8xLmpzIiwic3JjL2pzL2h3LzcvdGFza3MvMi5qcyIsInNyYy9qcy9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztlQ0FnQixDQUFELElBQU87QUFDcEIsTUFBSSxRQUFRLENBQUMsVUFBVCxLQUF3QixTQUE1QixFQUF1QztBQUNyQyxJQUFBLFFBQVEsQ0FBQyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsQ0FBOUM7QUFDRCxHQUZELE1BRU87QUFDTCxJQUFBLENBQUM7QUFDRjtBQUNGLEM7Ozs7Ozs7Ozs7OztBQ05EOztBQUNBOzs7O2VBRWUsTUFBTTtBQUNuQjtBQUNBO0FBQ0QsQzs7Ozs7Ozs7Ozs7O0FDTkQ7Ozs7QUFFQTtBQUNBO0FBRUEsTUFBTSxhQUFhLEdBQUksR0FBRCxJQUFVLEdBQUcsSUFBSSxDQUFQLEdBQVcsQ0FBWCxHQUFlLEdBQUcsR0FBRyxhQUFhLENBQUMsR0FBRyxHQUFHLENBQVAsQ0FBbEU7O0FBRUEsTUFBTSxPQUFPLEdBQUcsTUFBTTtBQUNwQixRQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsYUFBVCxDQUF1QixTQUF2QixDQUFwQjtBQUNBLE1BQUksV0FBVyxLQUFLLElBQXBCLEVBQTBCO0FBRTFCLFFBQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQyxhQUFaLENBQTBCLGtCQUExQixDQUF2QjtBQUNBLFFBQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxhQUFaLENBQTBCLGNBQTFCLENBQW5CO0FBQ0EsUUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFDLGFBQVosQ0FBMEIsaUJBQTFCLENBQXRCO0FBRUEsRUFBQSxVQUFVLENBQUMsZ0JBQVgsQ0FBNEIsT0FBNUIsRUFBcUMsTUFBTTtBQUN6QyxJQUFBLGFBQWEs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LENBQW1CLEdBQW5CLElBQTBCLENBQTNDLEVBQThDLE9BQTlDLENBQXNELE9BQXRELEVBQStELEVBQS9ELENBQUQsQ0FBSjtBQUNEO0FBQ0Y7QUFDRixHQVhIO0FBWUQsQ0FiRCIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJleHBvcnQgZGVmYXVsdCAoZikgPT4ge1xyXG4gIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycpIHtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmKTtcclxuICB9IGVsc2Uge1xyXG4gICAgZigpO1xyXG4gIH1cclxufTtcclxuIiwiaW1wb3J0IHQxIGZyb20gJy4vdGFza3MvMSc7XG5pbXBvcnQgdDIgZnJvbSAnLi90YXNrcy8yJztcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4ge1xuICB0MSgpO1xuICB0MigpO1xufTtcbiIsImltcG9ydCBkb2N1bWVudFJlYWR5IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvZG9jdW1lbnRSZWFkeSc7XG5cbi8vIERlc2NyaXB0aW9uOlxuLy8gMS7QndCw0L/QuNGB0LDRgtGMINGE0YPQvdC60YbQuNGOLCDQutC+0YLQvtGA0LDRjyDQstGL0YfQuNGB0LvRj9C10YIg0YTQsNC60YLQvtGA0LjQsNC7INC30LDQtNCw0L3QvdC+0LPQviDRh9C40YHQu9CwLlxuXG5jb25zdCBmYWN0b3JpYWxDYWxjID0gKG51bSkgPT4gKG51bSA8PSAxID8gMSA6IG51bSAqIGZhY3RvcmlhbENhbGMobnVtIC0gMSkpO1xuXG5jb25zdCB0YXNrUnVuID0gKCkgPT4ge1xuICBjb25zdCB0YXNrRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXNrLTEnKTtcbiAgaWYgKHRhc2tFbGVtZW50ID09PSBudWxsKSByZXR1cm47XG5cbiAgY29uc3QgdGV4dGJveEVsZW1lbnQgPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcudGFzay0xX190ZXh0Ym94Jyk7XG4gIGNvbnN0IGJ0bkVsZW1lbnQgPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcudGFzay0xX19idG4nKTtcbiAgY29uc3QgcmVzdWx0RWxlbWVudCA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXNrLTFfX3Jlc3VsdCcpO1xuXG4gIGJ0bkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgcmVzdWx0RWxlbWVudC52YWx1ZSA9IGZhY3RvcmlhbENhbGMoTnVtYmVyLnBhcnNlSW50KHRleHRib3hFbGVtZW50LnZhbHVlLCAxMCkpO1xuICB9KTtcblxuICAvLyBURVNUOlxuICBidG5FbGVtZW50LmNsaWNrKCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiBkb2N1bWVudFJlYWR5KHRhc2tSdW4pO1xuIiwiaW1wb3J0IGRvY3VtZW50UmVhZHkgZnJvbSAnLi4vLi4vLi4vaGVscGVycy9kb2N1bWVudFJlYWR5JztcblxuLy8gRGVzY3JpcHRpb246XG4vLyAyLtCd0LDQv9C40YHQsNGC0Ywg0YTRg9C90LrRhtC40Y4sINC60L7RgtC+0YDQsNGPINCy0YvQstC+0LTQuNGCINCy0YHQtSDRh9C40YHQu9CwINC40Lcg0LfQsNC00LDQvdC90L7Qs9C+INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtdC8INC00LjQsNC/0LDQt9C+0L3QsFxuLy8gICDQsiDQv9GA0Y/QvNC+0Lwg0L/QvtGA0Y/QtNC60LUuINCYINC10YnQtSDQvtC00L3RgyDRhNGD0L3QutGG0LjRjiDigJMg0LTQu9GPINCy0YvQstC+0LTQsCDQsiDQvtCx0YDQsNGC0L3QvtC8INC/0L7RgNGP0LTQutC1LlxuXG5jb25zdCB0YXNrUnVuID0gKCkgPT4ge1xuICBjb25zdCB0YXNrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRhc2stMicpO1xuICBpZiAodGFzayA9PT0gbnVsbCkgcmV0dXJuO1xuICBjb25zdCByYW5nZU1pbiA9IHRhc2sucXVlcnlTZWxlY3RvcignLnRhc2stMl9fcmFuZ2UtbWluJyk7XG4gIGNvbnN0IGxhYmVsTWluID0gdGFzay5xdWVyeVNlbGVjdG9yKCcudGFzay0yX19sYWJlbC1taW4nKTtcbiAgY29uc3QgcmFuZ2VNYXggPSB0YXNrLnF1ZXJ5U2VsZWN0b3IoJy50YXNrLTJfX3JhbmdlLW1heCcpO1xuICBjb25zdCBsYWJlbE1heCA9IHRhc2sucXVlcnlTZWxlY3RvcignLnRhc2stMl9fbGFiZWwtbWF4Jyk7XG4gIGNvbnN0IHJlc3VsdCA9IHRhc2sucXVlcnlTZWxlY3RvcignLnRhc2stMl9fcmVzdWx0Jyk7XG5cbiAgY29uc3QgcmFuZ2VOdW1iZXJzID0gKGEsIGIsIGFjYyA9IFtdKSA9PiB7XG4gICAgaWYgKGEgPT09IGIpIHtcbiAgICAgIGFjYy5wdXNoKGIpO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gICAgYWNjLnB1c2goYSk7XG4gICAgcmV0dXJuIHJhbmdlTnVtYmVycyhhICsgMSwgYiwgYWNjKTtcbiAgfTtcblxuICBjb25zdCBhc2NIYW5kbGVyID0gKCkgPT4gcmFuZ2VOdW1iZXJzKCtyYW5nZU1pbi52YWx1ZSwgK3JhbmdlTWF4LnZhbHVlKTtcbiAgY29uc3QgZGVzY0hhbmRsZXIgPSAoKSA9PiBhc2NIYW5kbGVyKCkucmV2ZXJzZSgpO1xuXG4gIG5ldyBNYXAoW1xuICAgIFsnbWluJywgeyByYW5nZTogcmFuZ2VNaW4sIGxhYmVsOiBsYWJlbE1pbiB9XSxcbiAgICBbJ21heCcsIHsgcmFuZ2U6IHJhbmdlTWF4LCBsYWJlbDogbGFiZWxNYXggfV0sXG4gIF0pLmZvckVhY2goKHYsIGssIG0pID0+IHtcbiAgICBtLmdldChrKS5sYWJlbC50ZXh0Q29udGVudCA9IG0uZ2V0KGspLnJhbmdlLnZhbHVlO1xuICAgIHYucmFuZ2UuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZSkgPT4ge1xuICAgICAgbS5nZXQoaykubGFiZWwudGV4dENvbnRlbnQgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgIGlmIChrID09PSAnbWF4Jykge1xuICAgICAgICBtLmdldCgnbWluJykucmFuZ2UubWF4ID0gZS50YXJnZXQudmFsdWU7XG4gICAgICAgIG0uZ2V0KCdtaW4nKS5sYWJlbC50ZXh0Q29udGVudCA9IG0uZ2V0KCdtaW4nKS5yYW5nZS52YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgbmV3IE1hcChbXG4gICAgWydhc2MnLCB7XG4gICAgICBidG46IHRhc2sucXVlcnlTZWxlY3RvcignLnRhc2stMl9fYnRuLWFzYycpLFxuICAgICAgaGFuZGxlcigpIHsgcmVzdWx0LnRleHRDb250ZW50ID0gYXNjSGFuZGxlcigpOyB9LFxuICAgIH1dLFxuICAgIFsnZGVzdCcsIHtcbiAgICAgIGJ0bjogdGFzay5xdWVyeVNlbGVjdG9yKCcudGFzay0yX19idG4tZGVzYycpLFxuICAgICAgaGFuZGxlcigpIHsgcmVzdWx0LnRleHRDb250ZW50ID0gZGVzY0hhbmRsZXIoKTsgfSxcbiAgICB9XSxcbiAgXSkuZm9yRWFjaCgodikgPT4gdi5idG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB2LmhhbmRsZXIpKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IGRvY3VtZW50UmVhZHkodGFza1J1bik7XG5cbi8qXG4vLyAzLtCd0LDQv9C40YHQsNGC0Ywg0YTRg9C90LrRhtC40Y4sINC60L7RgtC+0YDQsNGPINCy0YvQstC+0LTQuNGCINC/0LXRgNC10LTQsNC90L3QvtC1INC10Lkg0YfQuNGB0LvQviDQt9Cw0LTQvtC8INC90LDQv9C10YDQtdC0LlxuLy8gICDQndCw0L/RgNC40LzQtdGAOiDRh9C40YHQu9C+IDEyMzQg0LLRi9Cy0LXRgdGC0Lgg0LrQsNC6IDQzMjEuXG5cbi8vXG5cbi8vIDQu0J3QsNC/0LjRgdCw0YLRjCDRhNGD0L3QutGG0LjRjiwg0LrQvtGC0L7RgNCw0Y8g0YHRh9C40YLQsNC10YIg0YHRg9C80LzRgyDRhtC40YTRgCDRh9C40YHQu9CwLlxuLy8gICDQndCw0L/RgNC40LzQtdGAOiDRh9C40YHQu9C+IDEzNTcsINGB0YPQvNC80LAgMSArIDMgKyA1ICsgNyA9IDE2LlxuXG4vL1xuXG4vLyA1LtCd0LDQv9C40YHQsNGC0Ywg0YTRg9C90LrRhtC40Y4sINC60L7RgtC+0YDQsNGPINC/0YDQuNC90LjQvNCw0LXRgiDRh9C40YHQu9C+INC4INCy0YvQstC+0LTQuNGCINGB0L7QvtGC0LLQtdGC0YHRgtCy0YPRjtGJ0LXQtSDQutC+0LvQuNGH0LXRgdGC0LLQvlxuLy8gICDQstC70L7QttC10L3QvdGL0YUg0L/QsNGAINC60YDRg9Cz0LvRi9GFINGB0LrQvtCx0L7Qui4g0J3QsNC/0YDQuNC80LXRgDog0YfQuNGB0LvQviA0IOKAkyAoKCgoKSkpKS5cbiovXG4iLCJpbXBvcnQgZG9jdW1lbnRSZWFkeSBmcm9tICcuL2hlbHBlcnMvZG9jdW1lbnRSZWFkeSc7XG5pbXBvcnQgaHc3IGZyb20gJy4vaHcvNy9pbmRleCc7XG5cbmNvbnN0IGluaXQgPSB7IGh3NyB9O1xuXG5kb2N1bWVudFJlYWR5KCgpID0+IHtcbiAgZG9jdW1lbnRcbiAgICAucXVlcnlTZWxlY3RvcignLm1lbnVfX2xpc3QnKVxuICAgIC5xdWVyeVNlbGVjdG9yQWxsKCcubWVudV9fbGluaycpXG4gICAgLmZvckVhY2goKGEpID0+IHtcbiAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZiA9PT0gYS5ocmVmKSB7XG4gICAgICAgIGEuY2xhc3NMaXN0LmFkZCgnbWVudV9fbGluay0tYWN0aXZlJyk7XG5cbiAgICAgICAgaWYgKGEuaHJlZi5pbmNsdWRlcygnaHcnKSkge1xuICAgICAgICAgIGluaXRbYS5ocmVmLnN1YnN0cmluZyhhLmhyZWYubGFzdEluZGV4T2YoJy8nKSArIDEpLnJlcGxhY2UoJy5odG1sJywgJycpXSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG59KTtcbiJdLCJwcmVFeGlzdGluZ0NvbW1lbnQiOiIvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5TFhCaFkyc3ZYM0J5Wld4MVpHVXVhbk1pTENKemNtTXZhbk12YUdWc2NHVnljeTlrYjJOMWJXVnVkRkpsWVdSNUxtcHpJaXdpYzNKakwycHpMMmgzTHpjdmFXNWtaWGd1YW5NaUxDSnpjbU12YW5NdmFIY3ZOeTkwWVhOcmN5OHhMbXB6SWl3aWMzSmpMMnB6TDJoM0x6Y3ZkR0Z6YTNNdk1pNXFjeUlzSW5OeVl5OXFjeTl0WVdsdUxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCT3pzN096czdPenRsUTBGblFpeERRVUZFTEVsQlFVODdRVUZEY0VJc1RVRkJTU3hSUVVGUkxFTkJRVU1zVlVGQlZDeExRVUYzUWl4VFFVRTFRaXhGUVVGMVF6dEJRVU55UXl4SlFVRkJMRkZCUVZFc1EwRkJReXhuUWtGQlZDeERRVUV3UWl4clFrRkJNVUlzUlVGQk9FTXNRMEZCT1VNN1FVRkRSQ3hIUVVaRUxFMUJSVTg3UVVGRFRDeEpRVUZCTEVOQlFVTTdRVUZEUmp0QlFVTkdMRU03T3pzN096czdPenM3T3p0QlEwNUVPenRCUVVOQk96czdPMlZCUldVc1RVRkJUVHRCUVVOdVFqdEJRVU5CTzBGQlEwUXNRenM3T3pzN096czdPenM3TzBGRFRrUTdPenM3UVVGRlFUdEJRVU5CTzBGQlJVRXNUVUZCVFN4aFFVRmhMRWRCUVVrc1IwRkJSQ3hKUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZRTEVkQlFWY3NRMEZCV0N4SFFVRmxMRWRCUVVjc1IwRkJSeXhoUVVGaExFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFWQXNRMEZCYkVVN08wRkJSVUVzVFVGQlRTeFBRVUZQTEVkQlFVY3NUVUZCVFR0QlFVTndRaXhSUVVGTkxGZEJRVmNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCVkN4RFFVRjFRaXhUUVVGMlFpeERRVUZ3UWp0QlFVTkJMRTFCUVVrc1YwRkJWeXhMUVVGTExFbEJRWEJDTEVWQlFUQkNPMEZCUlRGQ0xGRkJRVTBzWTBGQll5eEhRVUZITEZkQlFWY3NRMEZCUXl4aFFVRmFMRU5CUVRCQ0xHdENRVUV4UWl4RFFVRjJRanRCUVVOQkxGRkJRVTBzVlVGQlZTeEhRVUZITEZkQlFWY3NRMEZCUXl4aFFVRmFMRU5CUVRCQ0xHTkJRVEZDTEVOQlFXNUNPMEZCUTBFc1VVRkJUU3hoUVVGaExFZEJRVWNzVjBGQlZ5eERRVUZETEdGQlFWb3NRMEZCTUVJc2FVSkJRVEZDTEVOQlFYUkNPMEZCUlVFc1JVRkJRU3hWUVVGVkxFTkJRVU1zWjBKQlFWZ3NRMEZCTkVJc1QwRkJOVUlzUlVGQmNVTXNUVUZCVFR0QlFVTjZReXhKUVVGQkxHRkJRV0VzUTBGQlF5eExRVUZrTEVkQlFYTkNMR0ZCUVdFc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVDeERRVUZuUWl4alFVRmpMRU5CUVVNc1MwRkJMMElzUlVGQmMwTXNSVUZCZEVNc1EwRkJSQ3hEUVVGdVF6dEJRVU5FTEVkQlJrUXNSVUZTYjBJc1EwRlpjRUk3TzBGQlEwRXNSVUZCUVN4VlFVRlZMRU5CUVVNc1MwRkJXRHRCUVVORUxFTkJaRVE3TzJWQlowSmxMRTFCUVUwc05FSkJRV01zVDBGQlpDeERPenM3T3pzN096czdPenM3UVVOMlFuSkNPenM3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUlVFc1RVRkJUU3hQUVVGUExFZEJRVWNzVFVGQlRUdEJRVU53UWl4UlFVRk5MRWxCUVVrc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQlZDeERRVUYxUWl4VFFVRjJRaXhEUVVGaU8wRkJRMEVzVFVGQlNTeEpRVUZKTEV0QlFVc3NTVUZCWWl4RlFVRnRRanRCUVVOdVFpeFJRVUZOTEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1lVRkJUQ3hEUVVGdFFpeHZRa0ZCYmtJc1EwRkJha0k3UVVGRFFTeFJRVUZOTEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1lVRkJUQ3hEUVVGdFFpeHZRa0ZCYmtJc1EwRkJha0k3UVVGRFFTeFJRVUZOTEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1lVRkJUQ3hEUVVGdFFpeHZRa0ZCYmtJc1EwRkJha0k3UVVGRFFTeFJRVUZOTEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1lVRkJUQ3hEUVVGdFFpeHZRa0ZCYmtJc1EwRkJha0k3UVVGRFFTeFJRVUZOTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1lVRkJUQ3hEUVVGdFFpeHBRa0ZCYmtJc1EwRkJaanM3UVVGRlFTeFJRVUZOTEZsQlFWa3NSMEZCUnl4RFFVRkRMRU5CUVVRc1JVRkJTU3hEUVVGS0xFVkJRVThzUjBGQlJ5eEhRVUZITEVWQlFXSXNTMEZCYjBJN1FVRkRka01zVVVGQlNTeERRVUZETEV0QlFVc3NRMEZCVml4RlFVRmhPMEZCUTFnc1RVRkJRU3hIUVVGSExFTkJRVU1zU1VGQlNpeERRVUZUTEVOQlFWUTdRVUZEUVN4aFFVRlBMRWRCUVZBN1FVRkRSRHM3UVVGRFJDeEpRVUZCTEVkQlFVY3NRMEZCUXl4SlFVRktMRU5CUVZNc1EwRkJWRHRCUVVOQkxGZEJRVThzV1VGQldTeERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRk1MRVZCUVZFc1EwRkJVaXhGUVVGWExFZEJRVmdzUTBGQmJrSTdRVUZEUkN4SFFWQkVPenRCUVZOQkxGRkJRVTBzVlVGQlZTeEhRVUZITEUxQlFVMHNXVUZCV1N4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVmdzUlVGQmEwSXNRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJOVUlzUTBGQmNrTTdPMEZCUTBFc1VVRkJUU3hYUVVGWExFZEJRVWNzVFVGQlRTeFZRVUZWTEVkQlFVY3NUMEZCWWl4RlFVRXhRanM3UVVGRlFTeE5RVUZKTEVkQlFVb3NRMEZCVVN4RFFVTk9MRU5CUVVNc1MwRkJSQ3hGUVVGUk8wRkJRVVVzU1VGQlFTeExRVUZMTEVWQlFVVXNVVUZCVkR0QlFVRnRRaXhKUVVGQkxFdEJRVXNzUlVGQlJUdEJRVUV4UWl4SFFVRlNMRU5CUkUwc1JVRkZUaXhEUVVGRExFdEJRVVFzUlVGQlVUdEJRVUZGTEVsQlFVRXNTMEZCU3l4RlFVRkZMRkZCUVZRN1FVRkJiVUlzU1VGQlFTeExRVUZMTEVWQlFVVTdRVUZCTVVJc1IwRkJVaXhEUVVaTkxFTkJRVklzUlVGSFJ5eFBRVWhJTEVOQlIxY3NRMEZCUXl4RFFVRkVMRVZCUVVrc1EwRkJTaXhGUVVGUExFTkJRVkFzUzBGQllUdEJRVU4wUWl4SlFVRkJMRU5CUVVNc1EwRkJReXhIUVVGR0xFTkJRVTBzUTBGQlRpeEZRVUZUTEV0QlFWUXNRMEZCWlN4WFFVRm1MRWRCUVRaQ0xFTkJRVU1zUTBGQlF5eEhRVUZHTEVOQlFVMHNRMEZCVGl4RlFVRlRMRXRCUVZRc1EwRkJaU3hMUVVFMVF6dEJRVU5CTEVsQlFVRXNRMEZCUXl4RFFVRkRMRXRCUVVZc1EwRkJVU3huUWtGQlVpeERRVUY1UWl4UFFVRjZRaXhGUVVGdFF5eERRVUZFTEVsQlFVODdRVUZEZGtNc1RVRkJRU3hEUVVGRExFTkJRVU1zUjBGQlJpeERRVUZOTEVOQlFVNHNSVUZCVXl4TFFVRlVMRU5CUVdVc1YwRkJaaXhIUVVFMlFpeERRVUZETEVOQlFVTXNUVUZCUml4RFFVRlRMRXRCUVhSRE96dEJRVU5CTEZWQlFVa3NRMEZCUXl4TFFVRkxMRXRCUVZZc1JVRkJhVUk3UVVGRFppeFJRVUZCTEVOQlFVTXNRMEZCUXl4SFFVRkdMRU5CUVUwc1MwRkJUaXhGUVVGaExFdEJRV0lzUTBGQmJVSXNSMEZCYmtJc1IwRkJlVUlzUTBGQlF5eERRVUZETEUxQlFVWXNRMEZCVXl4TFFVRnNRenRCUVVOQkxGRkJRVUVzUTBGQlF5eERRVUZETEVkQlFVWXNRMEZCVFN4TFFVRk9MRVZCUVdFc1MwRkJZaXhEUVVGdFFpeFhRVUZ1UWl4SFFVRnBReXhEUVVGRExFTkJRVU1zUjBGQlJpeERRVUZOTEV0QlFVNHNSVUZCWVN4TFFVRmlMRU5CUVcxQ0xFdEJRWEJFTzBGQlEwUTdRVUZEUml4TFFVNUVPMEZCVDBRc1IwRmFSRHRCUVdOQkxFMUJRVWtzUjBGQlNpeERRVUZSTEVOQlEwNHNRMEZCUXl4TFFVRkVMRVZCUVZFN1FVRkRUaXhKUVVGQkxFZEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNZVUZCVEN4RFFVRnRRaXhyUWtGQmJrSXNRMEZFUXpzN1FVRkZUaXhKUVVGQkxFOUJRVThzUjBGQlJ6dEJRVUZGTEUxQlFVRXNUVUZCVFN4RFFVRkRMRmRCUVZBc1IwRkJjVUlzVlVGQlZTeEZRVUV2UWp0QlFVRnZRenM3UVVGR01VTXNSMEZCVWl4RFFVUk5MRVZCUzA0c1EwRkJReXhOUVVGRUxFVkJRVk03UVVGRFVDeEpRVUZCTEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1lVRkJUQ3hEUVVGdFFpeHRRa0ZCYmtJc1EwRkVSVHM3UVVGRlVDeEpRVUZCTEU5QlFVOHNSMEZCUnp0QlFVRkZMRTFCUVVFc1RVRkJUU3hEUVVGRExGZEJRVkFzUjBGQmNVSXNWMEZCVnl4RlFVRm9RenRCUVVGeFF6czdRVUZHTVVNc1IwRkJWQ3hEUVV4TkxFTkJRVklzUlVGVFJ5eFBRVlJJTEVOQlUxa3NRMEZCUkN4SlFVRlBMRU5CUVVNc1EwRkJReXhIUVVGR0xFTkJRVTBzWjBKQlFVNHNRMEZCZFVJc1QwRkJka0lzUlVGQlowTXNRMEZCUXl4RFFVRkRMRTlCUVd4RExFTkJWR3hDTzBGQlZVUXNRMEUzUTBRN08yVkJLME5sTEUxQlFVMHNORUpCUVdNc1QwRkJaQ3hETzBGQlJYSkNPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN096czdPMEZEY0VWQk96dEJRVU5CT3pzN08wRkJSVUVzVFVGQlRTeEpRVUZKTEVkQlFVYzdRVUZCUlN4RlFVRkJMRWRCUVVjc1JVRkJTRHRCUVVGR0xFTkJRV0k3UVVGRlFTdzBRa0ZCWXl4TlFVRk5PMEZCUTJ4Q0xFVkJRVUVzVVVGQlVTeERRVU5NTEdGQlJFZ3NRMEZEYVVJc1lVRkVha0lzUlVGRlJ5eG5Ra0ZHU0N4RFFVVnZRaXhoUVVad1FpeEZRVWRITEU5QlNFZ3NRMEZIV1N4RFFVRkVMRWxCUVU4N1FVRkRaQ3hSUVVGSkxFMUJRVTBzUTBGQlF5eFJRVUZRTEVOQlFXZENMRWxCUVdoQ0xFdEJRWGxDTEVOQlFVTXNRMEZCUXl4SlFVRXZRaXhGUVVGeFF6dEJRVU51UXl4TlFVRkJMRU5CUVVNc1EwRkJReXhUUVVGR0xFTkJRVmtzUjBGQldpeERRVUZuUWl4dlFrRkJhRUk3TzBGQlJVRXNWVUZCU1N4RFFVRkRMRU5CUVVNc1NVRkJSaXhEUVVGUExGRkJRVkFzUTBGQlowSXNTVUZCYUVJc1EwRkJTaXhGUVVFeVFqdEJRVU42UWl4UlFVRkJMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlJpeERRVUZQTEZOQlFWQXNRMEZCYVVJc1EwRkJReXhEUVVGRExFbEJRVVlzUTBGQlR5eFhRVUZRTEVOQlFXMUNMRWRCUVc1Q0xFbEJRVEJDTEVOQlFUTkRMRVZCUVRoRExFOUJRVGxETEVOQlFYTkVMRTlCUVhSRUxFVkJRU3RFTEVWQlFTOUVMRU5CUVVRc1EwRkJTanRCUVVORU8wRkJRMFk3UVVGRFJpeEhRVmhJTzBGQldVUXNRMEZpUkNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lLR1oxYm1OMGFXOXVLQ2w3Wm5WdVkzUnBiMjRnY2lobExHNHNkQ2w3Wm5WdVkzUnBiMjRnYnlocExHWXBlMmxtS0NGdVcybGRLWHRwWmlnaFpWdHBYU2w3ZG1GeUlHTTlYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnY21WeGRXbHlaU1ltY21WeGRXbHlaVHRwWmlnaFppWW1ZeWx5WlhSMWNtNGdZeWhwTENFd0tUdHBaaWgxS1hKbGRIVnliaUIxS0drc0lUQXBPM1poY2lCaFBXNWxkeUJGY25KdmNpaGNJa05oYm01dmRDQm1hVzVrSUcxdlpIVnNaU0FuWENJcmFTdGNJaWRjSWlrN2RHaHliM2NnWVM1amIyUmxQVndpVFU5RVZVeEZYMDVQVkY5R1QxVk9SRndpTEdGOWRtRnlJSEE5Ymx0cFhUMTdaWGh3YjNKMGN6cDdmWDA3WlZ0cFhWc3dYUzVqWVd4c0tIQXVaWGh3YjNKMGN5eG1kVzVqZEdsdmJpaHlLWHQyWVhJZ2JqMWxXMmxkV3pGZFczSmRPM0psZEhWeWJpQnZLRzU4ZkhJcGZTeHdMSEF1Wlhod2IzSjBjeXh5TEdVc2JpeDBLWDF5WlhSMWNtNGdibHRwWFM1bGVIQnZjblJ6ZldadmNpaDJZWElnZFQxY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQnlaWEYxYVhKbEppWnlaWEYxYVhKbExHazlNRHRwUEhRdWJHVnVaM1JvTzJrckt5bHZLSFJiYVYwcE8zSmxkSFZ5YmlCdmZYSmxkSFZ5YmlCeWZTa29LU0lzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2htS1NBOVBpQjdYSEpjYmlBZ2FXWWdLR1J2WTNWdFpXNTBMbkpsWVdSNVUzUmhkR1VnUFQwOUlDZHNiMkZrYVc1bkp5a2dlMXh5WEc0Z0lDQWdaRzlqZFcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25SRTlOUTI5dWRHVnVkRXh2WVdSbFpDY3NJR1lwTzF4eVhHNGdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQm1LQ2s3WEhKY2JpQWdmVnh5WEc1OU8xeHlYRzRpTENKcGJYQnZjblFnZERFZ1puSnZiU0FuTGk5MFlYTnJjeTh4Snp0Y2JtbHRjRzl5ZENCME1pQm1jbTl0SUNjdUwzUmhjMnR6THpJbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQW9LU0E5UGlCN1hHNGdJSFF4S0NrN1hHNGdJSFF5S0NrN1hHNTlPMXh1SWl3aWFXMXdiM0owSUdSdlkzVnRaVzUwVW1WaFpIa2dabkp2YlNBbkxpNHZMaTR2TGk0dmFHVnNjR1Z5Y3k5a2IyTjFiV1Z1ZEZKbFlXUjVKenRjYmx4dUx5OGdSR1Z6WTNKcGNIUnBiMjQ2WEc0dkx5QXhMdENkMExEUXY5QzQwWUhRc05HQzBZd2cwWVRSZzlDOTBMclJodEM0MFk0c0lOQzYwTDdSZ3RDKzBZRFFzTkdQSU5DeTBZdlJoOUM0MFlIUXU5R1AwTFhSZ2lEUmhOQ3cwTHJSZ3RDKzBZRFF1TkN3MExzZzBMZlFzTkMwMExEUXZkQzkwTDdRczlDK0lOR0gwTGpSZ2RDNzBMQXVYRzVjYm1OdmJuTjBJR1poWTNSdmNtbGhiRU5oYkdNZ1BTQW9iblZ0S1NBOVBpQW9iblZ0SUR3OUlERWdQeUF4SURvZ2JuVnRJQ29nWm1GamRHOXlhV0ZzUTJGc1l5aHVkVzBnTFNBeEtTazdYRzVjYm1OdmJuTjBJSFJoYzJ0U2RXNGdQU0FvS1NBOVBpQjdYRzRnSUdOdmJuTjBJSFJoYzJ0RmJHVnRaVzUwSUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduTG5SaGMyc3RNU2NwTzF4dUlDQnBaaUFvZEdGemEwVnNaVzFsYm5RZ1BUMDlJRzUxYkd3cElISmxkSFZ5Ymp0Y2JseHVJQ0JqYjI1emRDQjBaWGgwWW05NFJXeGxiV1Z1ZENBOUlIUmhjMnRGYkdWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0p5NTBZWE5yTFRGZlgzUmxlSFJpYjNnbktUdGNiaUFnWTI5dWMzUWdZblJ1Uld4bGJXVnVkQ0E5SUhSaGMydEZiR1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSnk1MFlYTnJMVEZmWDJKMGJpY3BPMXh1SUNCamIyNXpkQ0J5WlhOMWJIUkZiR1Z0Wlc1MElEMGdkR0Z6YTBWc1pXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25MblJoYzJzdE1WOWZjbVZ6ZFd4MEp5azdYRzVjYmlBZ1luUnVSV3hsYldWdWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lDZ3BJRDArSUh0Y2JpQWdJQ0J5WlhOMWJIUkZiR1Z0Wlc1MExuWmhiSFZsSUQwZ1ptRmpkRzl5YVdGc1EyRnNZeWhPZFcxaVpYSXVjR0Z5YzJWSmJuUW9kR1Y0ZEdKdmVFVnNaVzFsYm5RdWRtRnNkV1VzSURFd0tTazdYRzRnSUgwcE8xeHVYRzRnSUM4dklGUkZVMVE2WEc0Z0lHSjBia1ZzWlcxbGJuUXVZMnhwWTJzb0tUdGNibjA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUNncElEMCtJR1J2WTNWdFpXNTBVbVZoWkhrb2RHRnphMUoxYmlrN1hHNGlMQ0pwYlhCdmNuUWdaRzlqZFcxbGJuUlNaV0ZrZVNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlvWld4d1pYSnpMMlJ2WTNWdFpXNTBVbVZoWkhrbk8xeHVYRzR2THlCRVpYTmpjbWx3ZEdsdmJqcGNiaTh2SURJdTBKM1FzTkMvMExqUmdkQ3cwWUxSakNEUmhOR0QwTDNRdXRHRzBMalJqaXdnMExyUXZ0R0MwTDdSZ05DdzBZOGcwTExSaTlDeTBMN1F0TkM0MFlJZzBMTFJnZEMxSU5HSDBMalJnZEM3MExBZzBMalF0eURRdDlDdzBMVFFzTkM5MEwzUXZ0Q3owTDRnMEwvUXZ0QzcwWXpRdDlDKzBMTFFzTkdDMExYUXU5QzEwTHdnMExUUXVOQ3cwTC9Rc05DMzBMN1F2ZEN3WEc0dkx5QWdJTkN5SU5DLzBZRFJqOUM4MEw3UXZDRFF2OUMrMFlEUmo5QzAwTHJRdFM0ZzBKZ2cwTFhSaWRDMUlOQyswTFRRdmRHRElOR0UwWVBRdmRDNjBZYlF1TkdPSU9LQWt5RFF0TkM3MFk4ZzBMTFJpOUN5MEw3UXROQ3dJTkN5SU5DKzBMSFJnTkN3MFlMUXZkQyswTHdnMEwvUXZ0R0EwWS9RdE5DNjBMVXVYRzVjYm1OdmJuTjBJSFJoYzJ0U2RXNGdQU0FvS1NBOVBpQjdYRzRnSUdOdmJuTjBJSFJoYzJzZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdWRHRnpheTB5SnlrN1hHNGdJR2xtSUNoMFlYTnJJRDA5UFNCdWRXeHNLU0J5WlhSMWNtNDdYRzRnSUdOdmJuTjBJSEpoYm1kbFRXbHVJRDBnZEdGemF5NXhkV1Z5ZVZObGJHVmpkRzl5S0NjdWRHRnpheTB5WDE5eVlXNW5aUzF0YVc0bktUdGNiaUFnWTI5dWMzUWdiR0ZpWld4TmFXNGdQU0IwWVhOckxuRjFaWEo1VTJWc1pXTjBiM0lvSnk1MFlYTnJMVEpmWDJ4aFltVnNMVzFwYmljcE8xeHVJQ0JqYjI1emRDQnlZVzVuWlUxaGVDQTlJSFJoYzJzdWNYVmxjbmxUWld4bFkzUnZjaWduTG5SaGMyc3RNbDlmY21GdVoyVXRiV0Y0SnlrN1hHNGdJR052Ym5OMElHeGhZbVZzVFdGNElEMGdkR0Z6YXk1eGRXVnllVk5sYkdWamRHOXlLQ2N1ZEdGemF5MHlYMTlzWVdKbGJDMXRZWGduS1R0Y2JpQWdZMjl1YzNRZ2NtVnpkV3gwSUQwZ2RHRnpheTV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3VkR0Z6YXkweVgxOXlaWE4xYkhRbktUdGNibHh1SUNCamIyNXpkQ0J5WVc1blpVNTFiV0psY25NZ1BTQW9ZU3dnWWl3Z1lXTmpJRDBnVzEwcElEMCtJSHRjYmlBZ0lDQnBaaUFvWVNBOVBUMGdZaWtnZTF4dUlDQWdJQ0FnWVdOakxuQjFjMmdvWWlrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWVdOak8xeHVJQ0FnSUgxY2JpQWdJQ0JoWTJNdWNIVnphQ2hoS1R0Y2JpQWdJQ0J5WlhSMWNtNGdjbUZ1WjJWT2RXMWlaWEp6S0dFZ0t5QXhMQ0JpTENCaFkyTXBPMXh1SUNCOU8xeHVYRzRnSUdOdmJuTjBJR0Z6WTBoaGJtUnNaWElnUFNBb0tTQTlQaUJ5WVc1blpVNTFiV0psY25Nb0szSmhibWRsVFdsdUxuWmhiSFZsTENBcmNtRnVaMlZOWVhndWRtRnNkV1VwTzF4dUlDQmpiMjV6ZENCa1pYTmpTR0Z1Wkd4bGNpQTlJQ2dwSUQwK0lHRnpZMGhoYm1Sc1pYSW9LUzV5WlhabGNuTmxLQ2s3WEc1Y2JpQWdibVYzSUUxaGNDaGJYRzRnSUNBZ1d5ZHRhVzRuTENCN0lISmhibWRsT2lCeVlXNW5aVTFwYml3Z2JHRmlaV3c2SUd4aFltVnNUV2x1SUgxZExGeHVJQ0FnSUZzbmJXRjRKeXdnZXlCeVlXNW5aVG9nY21GdVoyVk5ZWGdzSUd4aFltVnNPaUJzWVdKbGJFMWhlQ0I5WFN4Y2JpQWdYU2t1Wm05eVJXRmphQ2dvZGl3Z2F5d2diU2tnUFQ0Z2UxeHVJQ0FnSUcwdVoyVjBLR3NwTG14aFltVnNMblJsZUhSRGIyNTBaVzUwSUQwZ2JTNW5aWFFvYXlrdWNtRnVaMlV1ZG1Gc2RXVTdYRzRnSUNBZ2RpNXlZVzVuWlM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkcGJuQjFkQ2NzSUNobEtTQTlQaUI3WEc0Z0lDQWdJQ0J0TG1kbGRDaHJLUzVzWVdKbGJDNTBaWGgwUTI5dWRHVnVkQ0E5SUdVdWRHRnlaMlYwTG5aaGJIVmxPMXh1SUNBZ0lDQWdhV1lnS0dzZ1BUMDlJQ2R0WVhnbktTQjdYRzRnSUNBZ0lDQWdJRzB1WjJWMEtDZHRhVzRuS1M1eVlXNW5aUzV0WVhnZ1BTQmxMblJoY21kbGRDNTJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ2JTNW5aWFFvSjIxcGJpY3BMbXhoWW1Wc0xuUmxlSFJEYjI1MFpXNTBJRDBnYlM1blpYUW9KMjFwYmljcExuSmhibWRsTG5aaGJIVmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNCOUtUdGNibHh1SUNCdVpYY2dUV0Z3S0Z0Y2JpQWdJQ0JiSjJGell5Y3NJSHRjYmlBZ0lDQWdJR0owYmpvZ2RHRnpheTV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3VkR0Z6YXkweVgxOWlkRzR0WVhOakp5a3NYRzRnSUNBZ0lDQm9ZVzVrYkdWeUtDa2dleUJ5WlhOMWJIUXVkR1Y0ZEVOdmJuUmxiblFnUFNCaGMyTklZVzVrYkdWeUtDazdJSDBzWEc0Z0lDQWdmVjBzWEc0Z0lDQWdXeWRrWlhOMEp5d2dlMXh1SUNBZ0lDQWdZblJ1T2lCMFlYTnJMbkYxWlhKNVUyVnNaV04wYjNJb0p5NTBZWE5yTFRKZlgySjBiaTFrWlhOakp5a3NYRzRnSUNBZ0lDQm9ZVzVrYkdWeUtDa2dleUJ5WlhOMWJIUXVkR1Y0ZEVOdmJuUmxiblFnUFNCa1pYTmpTR0Z1Wkd4bGNpZ3BPeUI5TEZ4dUlDQWdJSDFkTEZ4dUlDQmRLUzVtYjNKRllXTm9LQ2gyS1NBOVBpQjJMbUowYmk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUhZdWFHRnVaR3hsY2lrcE8xeHVmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnS0NrZ1BUNGdaRzlqZFcxbGJuUlNaV0ZrZVNoMFlYTnJVblZ1S1R0Y2JseHVMeXBjYmk4dklETXUwSjNRc05DLzBMalJnZEN3MFlMUmpDRFJoTkdEMEwzUXV0R0cwTGpSaml3ZzBMclF2dEdDMEw3UmdOQ3cwWThnMExMUmk5Q3kwTDdRdE5DNDBZSWcwTC9RdGRHQTBMWFF0TkN3MEwzUXZkQyswTFVnMExYUXVTRFJoOUM0MFlIUXU5QytJTkMzMExEUXROQyswTHdnMEwzUXNOQy8wTFhSZ05DMTBMUXVYRzR2THlBZ0lOQ2QwTERRdjlHQTBMalF2TkMxMFlBNklOR0gwTGpSZ2RDNzBMNGdNVEl6TkNEUXN0R0wwTExRdGRHQjBZTFF1Q0RRdXRDdzBMb2dORE15TVM1Y2JseHVMeTljYmx4dUx5OGdOQzdRbmRDdzBML1F1TkdCMExEUmd0R01JTkdFMFlQUXZkQzYwWWJRdU5HT0xDRFF1dEMrMFlMUXZ0R0EwTERSanlEUmdkR0gwTGpSZ3RDdzBMWFJnaURSZ2RHRDBMelF2TkdESU5HRzBMalJoTkdBSU5HSDBMalJnZEM3MExBdVhHNHZMeUFnSU5DZDBMRFF2OUdBMExqUXZOQzEwWUE2SU5HSDBMalJnZEM3MEw0Z01UTTFOeXdnMFlIUmc5QzgwTHpRc0NBeElDc2dNeUFySURVZ0t5QTNJRDBnTVRZdVhHNWNiaTh2WEc1Y2JpOHZJRFV1MEozUXNOQy8wTGpSZ2RDdzBZTFJqQ0RSaE5HRDBMM1F1dEdHMExqUmppd2cwTHJRdnRHQzBMN1JnTkN3MFk4ZzBML1JnTkM0MEwzUXVOQzgwTERRdGRHQ0lOR0gwTGpSZ2RDNzBMNGcwTGdnMExMUmk5Q3kwTDdRdE5DNDBZSWcwWUhRdnRDKzBZTFFzdEMxMFlMUmdkR0MwTExSZzlHTzBZblF0ZEMxSU5DNjBMN1F1OUM0MFlmUXRkR0IwWUxRc3RDK1hHNHZMeUFnSU5DeTBMdlF2dEMyMExYUXZkQzkwWXZSaFNEUXY5Q3cwWUFnMExyUmdOR0QwTFBRdTlHTDBZVWcwWUhRdXRDKzBMSFF2dEM2TGlEUW5kQ3cwTC9SZ05DNDBMelF0ZEdBT2lEUmg5QzQwWUhRdTlDK0lEUWc0b0NUSUNnb0tDZ3BLU2twTGx4dUtpOWNiaUlzSW1sdGNHOXlkQ0JrYjJOMWJXVnVkRkpsWVdSNUlHWnliMjBnSnk0dmFHVnNjR1Z5Y3k5a2IyTjFiV1Z1ZEZKbFlXUjVKenRjYm1sdGNHOXlkQ0JvZHpjZ1puSnZiU0FuTGk5b2R5ODNMMmx1WkdWNEp6dGNibHh1WTI5dWMzUWdhVzVwZENBOUlIc2dhSGMzSUgwN1hHNWNibVJ2WTNWdFpXNTBVbVZoWkhrb0tDa2dQVDRnZTF4dUlDQmtiMk4xYldWdWRGeHVJQ0FnSUM1eGRXVnllVk5sYkdWamRHOXlLQ2N1YldWdWRWOWZiR2x6ZENjcFhHNGdJQ0FnTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSnk1dFpXNTFYMTlzYVc1ckp5bGNiaUFnSUNBdVptOXlSV0ZqYUNnb1lTa2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tIZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1b2NtVm1JRDA5UFNCaExtaHlaV1lwSUh0Y2JpQWdJQ0FnSUNBZ1lTNWpiR0Z6YzB4cGMzUXVZV1JrS0NkdFpXNTFYMTlzYVc1ckxTMWhZM1JwZG1VbktUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb1lTNW9jbVZtTG1sdVkyeDFaR1Z6S0Nkb2R5Y3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXNXBkRnRoTG1oeVpXWXVjM1ZpYzNSeWFXNW5LR0V1YUhKbFppNXNZWE4wU1c1a1pYaFBaaWduTHljcElDc2dNU2t1Y21Wd2JHRmpaU2duTG1oMGJXd25MQ0FuSnlsZEtDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYm4wcE8xeHVJbDE5In0=
